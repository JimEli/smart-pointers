// Minimal unique_ptr implementation.
#include <cstdlib> // nullptr_t
#include <utility> // swap

template<typename T>
class unique_ptr {
    T* _ptr{ nullptr }; // contained pointer

public:
    // Default ctor, creates a unique_ptr that owns nothing.
    constexpr unique_ptr() noexcept = default;
    // Ctor with nullptr, creates a unique_ptr that owns nothing.
    constexpr unique_ptr(std::nullptr_t) noexcept { }
    // Take ownership from a pointer.
    explicit unique_ptr(T* p) noexcept : _ptr{p} { }
    ~unique_ptr() {
        if (_ptr) 
            delete(_ptr); 
    }

    // Dereference pointer to the managed object.
    T& operator*() const noexcept { return *_ptr; }
    T* operator->() const noexcept { return _ptr; }

    // Return contained pointer.
    T* get() const noexcept { return _ptr; }

    // Check if associated managed object.
    explicit operator bool() const noexcept { return (_ptr) ? true : false; }

    // Release ownership to returned raw pointer.
    T* release() noexcept {
        T* cp = _ptr;
        _ptr = nullptr;
        return cp;
    }

    // Reset unique_ptr to empty and take ownership from a pointer.
    void reset(T* p = nullptr) {
        unique_ptr tmp{p};
        tmp.swap(*this);
    }

    // Swap with another unique_ptr.
    void swap(unique_ptr& up) noexcept {
        using std::swap;
        swap(_ptr, up._ptr);
    }

    // Disable copy from lvalue / Disables copy ctor.
    unique_ptr(const unique_ptr&) = delete;
    // Disable copy assignment.
    unique_ptr& operator=(const unique_ptr&) = delete;
};

// Operator overloading.
template<typename T, typename U>
inline bool operator==(const unique_ptr<T>& sp1, const unique_ptr<U>& sp2) { return sp1.get() == sp2.get(); }
template<typename T>
inline bool operator==(const unique_ptr<T>& sp, std::nullptr_t) noexcept { return !sp; }
template<typename T>
inline bool operator==(std::nullptr_t, const unique_ptr<T>& sp) noexcept { return !sp; }

template<typename T, typename U>
inline bool operator!=(const unique_ptr<T>& sp1, const unique_ptr<U>& sp2) { return sp1.get() != sp2.get(); }
template<typename T>
inline bool operator!=(const unique_ptr<T>& sp, std::nullptr_t) noexcept { return bool{sp}; }
template<typename T>
inline bool operator!=(std::nullptr_t, const unique_ptr<T>& sp) noexcept { return bool{sp}; }

// make_unique: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3656.htm
template<typename T, typename... Args>
std::unique_ptr<T> make_unique(Args&&... args) { return std::unique_ptr<T>(new T(std::forward<Args>(args)...)); }
